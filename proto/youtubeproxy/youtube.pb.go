// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/youtubeproxy/youtube.proto

package youtube

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Status tells whether or not the music file exists
type YtMusicReply_Status int32

const (
	YtMusicReply_UNKNOWN          YtMusicReply_Status = 0
	YtMusicReply_MUSIC_EXIST      YtMusicReply_Status = 1
	YtMusicReply_MUSIC_NOT_EXIST  YtMusicReply_Status = 2
	YtMusicReply_DOWNLOAD_FAIL    YtMusicReply_Status = 3
	YtMusicReply_DOWNLOAD_SUCCESS YtMusicReply_Status = 4
)

var YtMusicReply_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "MUSIC_EXIST",
	2: "MUSIC_NOT_EXIST",
	3: "DOWNLOAD_FAIL",
	4: "DOWNLOAD_SUCCESS",
}
var YtMusicReply_Status_value = map[string]int32{
	"UNKNOWN":          0,
	"MUSIC_EXIST":      1,
	"MUSIC_NOT_EXIST":  2,
	"DOWNLOAD_FAIL":    3,
	"DOWNLOAD_SUCCESS": 4,
}

func (x YtMusicReply_Status) String() string {
	return proto.EnumName(YtMusicReply_Status_name, int32(x))
}
func (YtMusicReply_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_youtube_fbaff1f347a15b30, []int{1, 0}
}

type YtMusicRequest struct {
	// Url is the url of the youtube music video
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YtMusicRequest) Reset()         { *m = YtMusicRequest{} }
func (m *YtMusicRequest) String() string { return proto.CompactTextString(m) }
func (*YtMusicRequest) ProtoMessage()    {}
func (*YtMusicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_youtube_fbaff1f347a15b30, []int{0}
}
func (m *YtMusicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YtMusicRequest.Unmarshal(m, b)
}
func (m *YtMusicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YtMusicRequest.Marshal(b, m, deterministic)
}
func (dst *YtMusicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YtMusicRequest.Merge(dst, src)
}
func (m *YtMusicRequest) XXX_Size() int {
	return xxx_messageInfo_YtMusicRequest.Size(m)
}
func (m *YtMusicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_YtMusicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_YtMusicRequest proto.InternalMessageInfo

func (m *YtMusicRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type YtMusicReply struct {
	// Name is the name of the music file
	Url                  string              `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name                 string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status               YtMusicReply_Status `protobuf:"varint,3,opt,name=status,proto3,enum=youtube.YtMusicReply_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *YtMusicReply) Reset()         { *m = YtMusicReply{} }
func (m *YtMusicReply) String() string { return proto.CompactTextString(m) }
func (*YtMusicReply) ProtoMessage()    {}
func (*YtMusicReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_youtube_fbaff1f347a15b30, []int{1}
}
func (m *YtMusicReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YtMusicReply.Unmarshal(m, b)
}
func (m *YtMusicReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YtMusicReply.Marshal(b, m, deterministic)
}
func (dst *YtMusicReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YtMusicReply.Merge(dst, src)
}
func (m *YtMusicReply) XXX_Size() int {
	return xxx_messageInfo_YtMusicReply.Size(m)
}
func (m *YtMusicReply) XXX_DiscardUnknown() {
	xxx_messageInfo_YtMusicReply.DiscardUnknown(m)
}

var xxx_messageInfo_YtMusicReply proto.InternalMessageInfo

func (m *YtMusicReply) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *YtMusicReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *YtMusicReply) GetStatus() YtMusicReply_Status {
	if m != nil {
		return m.Status
	}
	return YtMusicReply_UNKNOWN
}

func init() {
	proto.RegisterType((*YtMusicRequest)(nil), "youtube.YtMusicRequest")
	proto.RegisterType((*YtMusicReply)(nil), "youtube.YtMusicReply")
	proto.RegisterEnum("youtube.YtMusicReply_Status", YtMusicReply_Status_name, YtMusicReply_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// YoutubeServiceClient is the client API for YoutubeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YoutubeServiceClient interface {
	FindYoutubeMusic(ctx context.Context, in *YtMusicRequest, opts ...grpc.CallOption) (*YtMusicReply, error)
	DownloadYoutubeMusic(ctx context.Context, in *YtMusicRequest, opts ...grpc.CallOption) (*YtMusicReply, error)
}

type youtubeServiceClient struct {
	cc *grpc.ClientConn
}

func NewYoutubeServiceClient(cc *grpc.ClientConn) YoutubeServiceClient {
	return &youtubeServiceClient{cc}
}

func (c *youtubeServiceClient) FindYoutubeMusic(ctx context.Context, in *YtMusicRequest, opts ...grpc.CallOption) (*YtMusicReply, error) {
	out := new(YtMusicReply)
	err := c.cc.Invoke(ctx, "/youtube.YoutubeService/FindYoutubeMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youtubeServiceClient) DownloadYoutubeMusic(ctx context.Context, in *YtMusicRequest, opts ...grpc.CallOption) (*YtMusicReply, error) {
	out := new(YtMusicReply)
	err := c.cc.Invoke(ctx, "/youtube.YoutubeService/DownloadYoutubeMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YoutubeServiceServer is the server API for YoutubeService service.
type YoutubeServiceServer interface {
	FindYoutubeMusic(context.Context, *YtMusicRequest) (*YtMusicReply, error)
	DownloadYoutubeMusic(context.Context, *YtMusicRequest) (*YtMusicReply, error)
}

func RegisterYoutubeServiceServer(s *grpc.Server, srv YoutubeServiceServer) {
	s.RegisterService(&_YoutubeService_serviceDesc, srv)
}

func _YoutubeService_FindYoutubeMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YtMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YoutubeServiceServer).FindYoutubeMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youtube.YoutubeService/FindYoutubeMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YoutubeServiceServer).FindYoutubeMusic(ctx, req.(*YtMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YoutubeService_DownloadYoutubeMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YtMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YoutubeServiceServer).DownloadYoutubeMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youtube.YoutubeService/DownloadYoutubeMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YoutubeServiceServer).DownloadYoutubeMusic(ctx, req.(*YtMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _YoutubeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "youtube.YoutubeService",
	HandlerType: (*YoutubeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindYoutubeMusic",
			Handler:    _YoutubeService_FindYoutubeMusic_Handler,
		},
		{
			MethodName: "DownloadYoutubeMusic",
			Handler:    _YoutubeService_DownloadYoutubeMusic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/youtubeproxy/youtube.proto",
}

func init() {
	proto.RegisterFile("proto/youtubeproxy/youtube.proto", fileDescriptor_youtube_fbaff1f347a15b30)
}

var fileDescriptor_youtube_fbaff1f347a15b30 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0xc6, 0xef, 0xa8, 0x28, 0xf7, 0x78, 0xaf, 0xe6, 0xce, 0x55, 0x14, 0x71, 0x11, 0x66, 0x25,
	0x2e, 0x0c, 0xd8, 0xae, 0xdc, 0x89, 0x7f, 0x40, 0xaa, 0x09, 0x38, 0x8a, 0x75, 0x25, 0xa3, 0x19,
	0x6c, 0x4a, 0xcc, 0xa4, 0xc9, 0xa4, 0xad, 0xdb, 0xbe, 0x42, 0x5f, 0xac, 0xd0, 0x37, 0x28, 0x7d,
	0x90, 0xe2, 0x24, 0x4a, 0xa9, 0xdd, 0x75, 0x77, 0xce, 0xef, 0x7c, 0x9c, 0xef, 0x9b, 0x39, 0xa0,
	0xfb, 0x81, 0x90, 0xc2, 0xd8, 0x8b, 0x48, 0x46, 0x6b, 0xee, 0x07, 0xe2, 0x71, 0x7f, 0x6c, 0x5a,
	0x6a, 0x84, 0x73, 0x49, 0x5b, 0xab, 0x6f, 0x85, 0xd8, 0xba, 0xdc, 0x60, 0xbe, 0x63, 0x30, 0xcf,
	0x13, 0x92, 0x49, 0x47, 0x78, 0x61, 0x2c, 0x23, 0x04, 0x0a, 0x4b, 0x39, 0x89, 0x42, 0x67, 0x33,
	0xe5, 0x77, 0x11, 0x0f, 0x25, 0xd6, 0x20, 0x1d, 0x05, 0x6e, 0x15, 0xe9, 0xa8, 0xf1, 0x7b, 0x7a,
	0x28, 0xc9, 0x0b, 0x82, 0x3f, 0x27, 0x91, 0xef, 0xee, 0xcf, 0x25, 0x18, 0x43, 0xc6, 0x63, 0x3b,
	0x5e, 0x4d, 0x29, 0xa4, 0x6a, 0x7c, 0x09, 0xd9, 0x50, 0x32, 0x19, 0x85, 0xd5, 0xb4, 0x8e, 0x1a,
	0x85, 0x76, 0xbd, 0x75, 0x4c, 0xf8, 0x79, 0x59, 0x8b, 0x2a, 0xcd, 0x34, 0xd1, 0x12, 0x1b, 0xb2,
	0x31, 0xc1, 0x79, 0xc8, 0xcd, 0xcd, 0x2b, 0xd3, 0x5a, 0x98, 0xda, 0x2f, 0x5c, 0x84, 0xfc, 0x64,
	0x4e, 0x47, 0xbd, 0xd5, 0xe0, 0x7a, 0x44, 0x67, 0x1a, 0xc2, 0xff, 0xa1, 0x18, 0x03, 0xd3, 0x9a,
	0x25, 0x30, 0x85, 0xff, 0xc1, 0xdf, 0xbe, 0xb5, 0x30, 0xc7, 0x56, 0xb7, 0xbf, 0x1a, 0x76, 0x47,
	0x63, 0x2d, 0x8d, 0x4b, 0xa0, 0x9d, 0x10, 0x9d, 0xf7, 0x7a, 0x03, 0x4a, 0xb5, 0x4c, 0xfb, 0x0d,
	0x41, 0x61, 0x19, 0xa7, 0xa1, 0x3c, 0xb8, 0x77, 0x36, 0x1c, 0xdb, 0xa0, 0x0d, 0x1d, 0xcf, 0x4e,
	0xa8, 0x0a, 0x88, 0x2b, 0xe7, 0x91, 0xd5, 0x27, 0xd5, 0xca, 0xdf, 0xbe, 0x85, 0xe8, 0x4f, 0xaf,
	0xef, 0xcf, 0xa9, 0x1a, 0x29, 0x1f, 0x8f, 0x61, 0xec, 0x0e, 0x43, 0x23, 0xe4, 0x2c, 0xd8, 0xdc,
	0x74, 0x50, 0x13, 0xdf, 0x42, 0xa9, 0x2f, 0x1e, 0x3c, 0x57, 0xb0, 0x9f, 0x39, 0x11, 0xe5, 0x54,
	0x27, 0x95, 0x2f, 0x4e, 0x76, 0xb2, 0xbc, 0x83, 0x9a, 0xeb, 0xac, 0x3a, 0xf1, 0xc5, 0x47, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x11, 0xbc, 0xbb, 0x32, 0x2d, 0x02, 0x00, 0x00,
}
